#+TITLE: migrate from doom to guix-home style emacs

* Prep

** Doom

*** Collect list of packages required by doom emacs

#+begin_src shell :results output file :file doom.pkg
find ~/.emacs.doom/.local/straight/repos/ -maxdepth 1 -type d | sed -e "s/^.*\.local\/straight\/repos\///" | sort
#+end_src

#+name: pkg-doom
#+RESULTS:
[[file:doom.pkg]]

** Daviwil

*** Collect list of packages required by daviwil emacs

#+begin_src shell :results output file :file daviwil.pkg
grep -re "^\s*(setup (:pkg" ~/.emacs.new/.emacs.daviwil/modules/ \
    | sed -e "s/^.*:pkg//" \
    | sed -e "s/[):].*$//" \
    | sort
#+end_src

#+name: pkg-daviwil
#+RESULTS:
[[file:daviwil.pkg]]

*** Collect list of packages via straight

#+begin_src shell :results output file :file daviwil-straight.pkg
grep -re "^\s*(setup (:pkg.*:straight" ~/.emacs.new/.emacs.daviwil/modules/ \
    | sed -e "s/^.*:pkg//" \
    | sed -e "s/[):].*$//" \
    | sort
#+end_src

#+name: pkg-daviwil-straight
#+RESULTS:
[[file:daviwil-straight.pkg]]


** Packages

*** All packages

#+begin_src shell :results output file :file all-packages.pkg
cat doom.pkg daviwil.pkg | sort
#+end_src

#+RESULTS:
[[file:all-packages.pkg]]

*** Merge package lists

**** Guix packages from daviwil

#+begin_src shell :results output file :file daviwil-guix.pkg
diff --ignore-all-space daviwil.pkg daviwil-straight.pkg | grep -e "^<" | sed -e 's/^<\s*//' | sort
#+end_src

#+RESULTS:
[[file:daviwil-guix.pkg]]

***** emit the initial guix manifest

This could be a scheme script that programmatically defines a manifest

#+begin_src shell :results output file :file daviwil.scm
echo "(specifications->manifest '("
awk '{prif}'

echo "     ))"
#+end_src

**** Packages unique to doom

#+begin_src shell :results output file :file doom-only.pkg
diff --ignore-all-space doom.pkg daviwil.pkg | grep -e "^<" | sed -e 's/^<\s*//' | sort
#+end_src

#+RESULTS:
[[file:doom-only.pkg]]

**** Packages unique to daviwil

#+begin_src shell :results output file :file daviwil-only.pkg
diff --ignore-all-space daviwil.pkg doom.pkg | grep -e "^<" | sed -e 's/^<\s*//' | sort
#+end_src

#+RESULTS:
[[file:daviwil-only.pkg]]

*** Guix Graph

#+begin_src shell :results output file :file ./daviwil-guix.png

#+end_src

** Packages for Features

*** For latex

#+begin_src shell :results output table
grep -e "tex" *-only.pkg | sed -e "s/:/\t/"
#+end_src

#+RESULTS:
| daviwil-only.pkg | default-text-scale |
| doom-only.pkg    | auctex             |
| doom-only.pkg    | cdlatex            |
| doom-only.pkg    | company-auctex     |
| doom-only.pkg    | company-reftex     |
| doom-only.pkg    | helm-bibtex        |
| doom-only.pkg    | latex-preview-pane |

* Features

** General.el

This is not well supported in the config. This is an incredibly useful package,
but unfortunately, most subpackages need to support it as well.

To run a command that documents all general-configured keybindings, run
=general-describe-keybindings=. This outputs an org-file whose tables can be
quickly decorated to produce a cheatsheet for each mode-map that that prints
nicely.

#+begin_example
- ./dw-auth.el:14:  (dw/leader-key-def
- ./dw-core.el:155:  (general-create-definer dw/leader-key-def
- ./dw-core.el:385:  (dw/leader-key-def
- ./dw-core.el:595:(dw/leader-key-def
- ./dw-dev.el:113:  (dw/leader-key-def
- ./dw-mail.el:113:  (dw/leader-key-def
- ./dw-media.el:11:  (dw/leader-key-def
- ./dw-shell.el:136:(dw/leader-key-def
- ./dw-streaming.el:32:(dw/leader-key-def
- ./dw-system.el:5:(dw/leader-key-def
- ./dw-workflow.el:153:  (dw/leader-key-def

#+end_example


#+begin_example emacs-lisp
(setup (:pkg general)
  (general-evil-setup t)

  (general-create-definer dw/leader-key-def
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (general-create-definer dw/ctrl-c-keys
    :prefix "C-c"))

(dw/ctrl-c-keys
  "o"   '(:ignore t :which-key "org mode")

  "oi"  '(:ignore t :which-key "insert")
  "oil" '(org-insert-link :which-key "insert link")

  "on"  '(org-toggle-narrow-to-subtree :which-key "toggle narrow")

  "os"  '(dw/counsel-rg-org-files :which-key "search notes")

  "oa"  '(org-agenda :which-key "status")
  "ot"  '(org-todo-list :which-key "todos")
  "oc"  '(org-capture t :which-key "capture")
  "ox"  '(org-export-dispatch t :which-key "export"))
#+end_example

Unfortunately, to support this behavior, the packages that establish keybindings
either need to import general as a dependency (not necessary) or AFAIK all their
keybindings need to be reimported ... which is one thing Doom does.

** Keybindings

*** Toggle Map

My macro is imported to create toggleable booleans, but it still uses the old
Doom =(map! ...)= syntax, so automatically specifying keybindings doesn't work.

*** Keymaps

**** Doom Config

Leader key (defined in ~/.emacs.doom/lisp/doom-keybinds.el)

#+begin_example emacs-lisp
(defvar doom-leader-key "SPC"
  "The leader prefix key for Evil users.")

(defvar doom-leader-alt-key "M-SPC"
  "An alternative leader prefix key, used for Insert and Emacs states, and for
non-evil users.")

(defvar doom-localleader-key "SPC m"
  "The localleader prefix key, for major-mode specific commands.")

(defvar doom-localleader-alt-key "M-SPC m"
  "The localleader prefix key, for major-mode specific commands. Used for Insert
and Emacs states, and for non-evil users.")
#+end_example

Keymaps are created with =(make-sparse-keymap)= and assigned to a map

#+begin_example emacs-lisp
(defvar doom-leader-map (make-sparse-keymap)
  "An overriding keymap for <leader> keys.")

;; usage (see emacs manual)
(let ((map (make-sparse-keymap)))
  (define-key map "n" #'next-line)
  (define-key map "p" #'previous-line)
  map)
#+end_example


*** Which Keys

**** Doom Config

#+begin_example emacs-lisp

(define-key! help-map
;;...


  ;; make `describe-bindings' available under the b prefix which it previously
  ;; occupied. Add more binding related commands under that prefix as well
  "b"    nil
  "bb"   #'describe-bindings
  "bi"   #'which-key-show-minor-mode-keymap
  "bm"   #'which-key-show-major-mode
  "bt"   #'which-key-show-top-level
  "bf"   #'which-key-show-full-keymap
  "bk"   #'which-key-show-keymap

  ;;...
)


(after! which-key
  (let ((prefix-re (regexp-opt (list doom-leader-key doom-leader-alt-key))))
    (cl-pushnew `((,(format "\\`\\(?:<\\(?:\\(?:f1\\|help\\)>\\)\\|C-h\\|%s h\\) d\\'" prefix-re))
                  nil . "doom")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`\\(?:<\\(?:\\(?:f1\\|help\\)>\\)\\|C-h\\|%s h\\) r\\'" prefix-re))
                  nil . "reload")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`\\(?:<\\(?:\\(?:f1\\|help\\)>\\)\\|C-h\\|%s h\\) b\\'" prefix-re))
                  nil . "bindings")
                which-key-replacement-alist)))


#+end_example

Evil config

#+begin_example emacs-lisp

(after! which-key
  (let ((prefix-re (regexp-opt (list doom-leader-key doom-leader-alt-key))))
    (cl-pushnew `((,(format "\\`\\(?:C-w\\|%s w\\) m\\'" prefix-re))
                  nil . "maximize")
                which-key-replacement-alist)))

#+end_example

** Popper

Written by karthink, who actually uses hyperkey.

** Hyperkey

i haven't looked into that since like 2013. However, most window managers don't
properly process it. Sway doesn't even interpret it.

* Modules

** Daviwil
I would like to import most of these as they are.

*** Activated in Init
Evilmode is set up. I guess i'll give it a try...

**** package

**** settings

**** core

+ needed, minimal changes
+ probably the largest module though


**** interface

+ packages
  - projectile

**** auth

+ contains pgp/pinentry
  - I don't want emacs to do this because I'm paranoid
  - rather than frequently type the GPG PIN, i would rather use something like
    the =emacs-agent-set= script I use to make emacs aware of an SSH agent

**** shell (300 LOC)

**** dev

+ requires:
  - dw/adl-mode.el

+ contains lispyville config
+ packages
  - rainbow-delimiters
  - rainbow-mode
  - smartparens
+ VCS packages
  - magit, magit-todos
  - smerge
  - git-link
+ Code Formatting
  - apheleia
  - lispy
  - lispyville
+ Code
  - flycheck
+ Emacs Lisp
+ Common Lisp
+ Scheme
+ Mesche
+ CADL
+ Snippets
  - yasnippet

**** dev-web

+ typescript
  - typescript-mode
  - eglot
+ javascript
  - js2-mode
+ markdown
  - markdown-mode
+ web
  - web-mode
  - impatient-mode
  - skewer-mode
  - yaml-mode

**** workflow (515 LOC)

+ requires:
  - dw-org

+ org
  - reset org-directory
+ org-agenda
  - empty org-agenda-files
+ org-modules
  - remove org-eshell
  - remove org-irc
  - remove org-habit
+ org-modern
  - try fetching from guix

org-src-lang-modes

#+begin_example
Value
(("dot" . graphviz-dot)
 ("translate" . text)
 ("md" . markdown)
 ("C" . c)
 ("C++" . c++)
 ("asymptote" . asy)
 ("bash" . sh)
 ("beamer" . latex)
 ("calc" . fundamental)
 ("cpp" . c++)
 ("ditaa" . artist)
 ("desktop" . conf-desktop)
 ("dot" . fundamental)
 ("elisp" . emacs-lisp)
 ("ocaml" . tuareg)
 ("screen" . shell-script)
 ("shell" . sh)
 ("sqlite" . sql)
 ("toml" . conf-toml))

Original Value
(("C" . c)
 ("C++" . c++)
 ("asymptote" . asy)
 ("bash" . sh)
 ("beamer" . latex)
 ("calc" . fundamental)
 ("cpp" . c++)
 ("ditaa" . artist)
 ("desktop" . conf-desktop)
 ("dot" . fundamental)
 ("elisp" . emacs-lisp)
 ("ocaml" . tuareg)
 ("screen" . shell-script)
 ("shell" . sh)
 ("sqlite" . sql)
 ("toml" . conf-toml))

#+end_example


**** social

**** media

**** system


*** Activated Elsewhere

**** autorest

**** desktop (n/a)

**** dev-misc

+ zig-mode ... i'm just going to zag
  - zig looks like an interesting language, but it's not homoiconic

**** exwm

**** finance

**** mail

**** org

**** present

**** streaming

**** swagger

**** vimb
