#+TITLE: migrate from doom to guix-home style emacs

* Prep

** Doom

*** Collect list of packages required by doom emacs

#+begin_src shell :results output file :file doom.pkg
find ~/.emacs.doom/.local/straight/repos/ -maxdepth 1 -type d | sed -e "s/^.*\.local\/straight\/repos\///" | sort
#+end_src

#+name: pkg-doom
#+RESULTS:
[[file:doom.pkg]]

** Daviwil

*** Collect list of packages required by daviwil emacs

#+begin_src shell :results output file :file daviwil.pkg
grep -re "^\s*(setup (:pkg" ~/.emacs.new/.emacs.daviwil/modules/ \
    | sed -e "s/^.*:pkg//" \
    | sed -e "s/[):].*$//" \
    | sort
#+end_src

#+name: pkg-daviwil
#+RESULTS:
[[file:daviwil.pkg]]

*** Collect list of packages via straight

#+begin_src shell :results output file :file daviwil-straight.pkg
grep -re "^\s*(setup (:pkg.*:straight" ~/.emacs.new/.emacs.daviwil/modules/ \
    | sed -e "s/^.*:pkg//" \
    | sed -e "s/[):].*$//" \
    | sort
#+end_src

#+name: pkg-daviwil-straight
#+RESULTS:
[[file:daviwil-straight.pkg]]


** Packages

*** All packages

#+begin_src shell :results output file :file all-packages.pkg
cat doom.pkg daviwil.pkg | sort
#+end_src

#+RESULTS:
[[file:all-packages.pkg]]

*** Merge package lists

**** Guix packages from daviwil

#+begin_src shell :results output file :file daviwil-guix.pkg
diff --ignore-all-space daviwil.pkg daviwil-straight.pkg | grep -e "^<" | sed -e 's/^<\s*//' | sort
#+end_src

#+RESULTS:
[[file:daviwil-guix.pkg]]

***** emit the initial guix manifest

This could be a scheme script that programmatically defines a manifest

#+begin_src shell :results output file :file daviwil.scm
echo "(specifications->manifest '("
awk '{prif}'

echo "     ))"
#+end_src

**** Packages unique to doom

#+begin_src shell :results output file :file doom-only.pkg
diff --ignore-all-space doom.pkg daviwil.pkg | grep -e "^<" | sed -e 's/^<\s*//' | sort
#+end_src

#+RESULTS:
[[file:doom-only.pkg]]

**** Packages unique to daviwil

#+begin_src shell :results output file :file daviwil-only.pkg
diff --ignore-all-space daviwil.pkg doom.pkg | grep -e "^<" | sed -e 's/^<\s*//' | sort
#+end_src

#+RESULTS:
[[file:daviwil-only.pkg]]

*** Guix Graph

#+begin_src shell :results output file :file ./daviwil-guix.png

#+end_src

** Packages for Features

*** For latex

#+begin_src shell :results output table
grep -e "tex" *-only.pkg | sed -e "s/:/\t/"
#+end_src

#+RESULTS:
| daviwil-only.pkg | default-text-scale |
| doom-only.pkg    | auctex             |
| doom-only.pkg    | cdlatex            |
| doom-only.pkg    | company-auctex     |
| doom-only.pkg    | company-reftex     |
| doom-only.pkg    | helm-bibtex        |
| doom-only.pkg    | latex-preview-pane |

* Modules


** Daviwil
I would like to import most of these as they are.

*** Activated in Init
Evilmode is set up. I guess i'll give it a try...

**** package

**** settings

**** core

+ needed, minimal changes
+ probably the largest module though


**** interface

+ packages
  - projectile

**** auth

+ contains pgp/pinentry
  - I don't want emacs to do this because I'm paranoid
  - rather than frequently type the GPG PIN, i would rather use something like
    the =emacs-agent-set= script I use to make emacs aware of an SSH agent

**** shell (300 LOC)

**** dev

+ requires:
  - dw/adl-mode.el

+ contains lispyville config
+ packages
  - rainbow-delimiters
  - rainbow-mode
  - smartparens
+ VCS packages
  - magit, magit-todos
  - smerge
  - git-link
+ Code Formatting
  - apheleia
  - lispy
  - lispyville
+ Code
  - flycheck
+ Emacs Lisp
+ Common Lisp
+ Scheme
+ Mesche
+ CADL
+ Snippets
  - yasnippet

**** dev-web

+ typescript
  - typescript-mode
  - eglot
+ javascript
  - js2-mode
+ markdown
  - markdown-mode
+ web
  - web-mode
  - impatient-mode
  - skewer-mode
  - yaml-mode

**** workflow (515 LOC)

+ requires:
  - dw-org

+ org
  - reset org-directory
+ org-agenda
  - empty org-agenda-files
+ org-modules
  - remove org-eshell
  - remove org-irc
  - remove org-habit
+ org-modern
  - try fetching from guix

org-src-lang-modes

#+begin_example
Value
(("dot" . graphviz-dot)
 ("translate" . text)
 ("md" . markdown)
 ("C" . c)
 ("C++" . c++)
 ("asymptote" . asy)
 ("bash" . sh)
 ("beamer" . latex)
 ("calc" . fundamental)
 ("cpp" . c++)
 ("ditaa" . artist)
 ("desktop" . conf-desktop)
 ("dot" . fundamental)
 ("elisp" . emacs-lisp)
 ("ocaml" . tuareg)
 ("screen" . shell-script)
 ("shell" . sh)
 ("sqlite" . sql)
 ("toml" . conf-toml))

Original Value
(("C" . c)
 ("C++" . c++)
 ("asymptote" . asy)
 ("bash" . sh)
 ("beamer" . latex)
 ("calc" . fundamental)
 ("cpp" . c++)
 ("ditaa" . artist)
 ("desktop" . conf-desktop)
 ("dot" . fundamental)
 ("elisp" . emacs-lisp)
 ("ocaml" . tuareg)
 ("screen" . shell-script)
 ("shell" . sh)
 ("sqlite" . sql)
 ("toml" . conf-toml))

#+end_example


**** social

**** media

**** system


*** Activated Elsewhere

**** autorest

**** desktop (n/a)

**** dev-misc

+ zig-mode ... i'm just going to zag
  - zig looks like an interesting language, but it's not homoiconic

**** exwm

**** finance

**** mail

**** org

**** present

**** streaming

**** swagger

**** vimb
