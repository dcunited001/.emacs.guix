#+TITLE: Emacs Config
#+DESCRIPTION: Sporked from daviwil/dotfiles

Based on the =.emacs.d= config in the [[https://github.com/daviwil/dotfiles/tree/guix-home][guix-home branch of daviwil/dotfiles]]. His
config allows you to easily combine dependencies pulled from straight or
guix.

#+begin_quote
Considering the guix packages just updated Emacs 29 -> 30 underneath me while
I was migrating dotfiles and I only noticed in the `guix pull` output...

... then I think that this system may work out alright.
#+end_quote

* Setup

Assumed file paths are found in =./init.el=

Emacs paths & variables.

|------------------+------------------------+-------------------------|
| var              | value                  | description             |
|------------------+------------------------+-------------------------|
| dc/emacs-chemacs | $HOME/.emacs.d/        | now you haz backup plan |
| dc/emacs-d       | $HOME/.emacs.g/        | well this is confusing  |
| dc/emacs-cache   | $HOME/.cache/emacs/    |                         |
| dc/emacs-dw      | $HOME/.emacs.g/dw      | added to load-path      |
| dc/emacs-modules | $HOME/.emacs.g/modules | added to load-path      |
|------------------+------------------------+-------------------------|

Org paths & variables

|----------------------+----------------------+-------------------------------------|
| var                  | value                | description                         |
|----------------------+----------------------+-------------------------------------|
| org-directory        | $ORG_DIRECTORY       |                                     |
| org-roam-directory   | $ORG_DIRECTORY/roam/ |                                     |
| org-roam-db-location |                      | may exhibit problems with syncthing |
|----------------------+----------------------+-------------------------------------|

Other files:

|-----+-------+-------------|
| var | value | description |
|-----+-------+-------------|
|     |       |             |
|-----+-------+-------------|

For a more complete list of =.emacs.d= file paths, see these lines in
[[https://github.com/emacscollective/no-littering/blob/main/no-littering.el#L213-L494][emacscollective/no-littering]].

** Chemacs

** Packages

*** Guix

Dependencies are loaded from guix first by a manifest and straight dependencies
are loaded on top.

**** TODO Setup manifest

**** TODO Activate profile

+ guix shell will redo this anyways if there are changes, but unless you've run
  =guix pull -p $profile= this is unlikely

**** TODO Guix Shell

*** Straight

Moving =~/.emacs.g= to a new location may require blowing away straight with =rm
-rf ~/.emacs.g/straight= and reloading emacs to reinstall everything.

*** Fonts

If you want to use the font packages from Guix, you'll need to ensure that the
font directories in =~/.guix-extra-profiles= is made available in fontconfig.

*** =no-littering=

** Emacs Config

*** Mixing Popper.el with Doom's Popups

+ [[https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Zen-of-Buffer-Display.html][Zen of the Buffer Display]]
+ [[https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Zen-of-Buffer-Display.html][Displaying Buffers]]

*Popper is simple and works great with almost zero config. It can:*

- promote buffers to popups
- narrow popup selection/manipulation to a context (project/etc)

Extending Popper's behavior requires more understanding of emacs windows, frames
and tabs. So, techniques like like surrounding function calls with let or using
setf or creating functions to dispatch on context may be required.

*Doom has more comprehensive configuration:*

- the buffers you're likely to encounter are already spec'd out.
- handles window/frame customizations.

**** How Doom's code is loaded

I just imported the extant =+popup= module code with minimal tweaks.

While the Doom Emacs modeline and snippets packages are simple to utilize, there
isn't a good way to cherry-pick packages/scripts from Doom Emacs.

+ use-package, quelpa and straight do include features like =:files=,
  =:includes= and =:build=, but Doom isn't a package AFAIK. Even if I could use
  these, I don't want to risk building/running Doom's code unless I specify that
  file/package.
+ I don't have submodules and it's likely this will end up being a submodule.

**** Some caveats

#+begin_quote
I really wouldn't have set out expecting to end up with a mixed config like
this. I wouldn't try this in your init.el ... but for now, it should allow me to
experiment with both popup systems.
#+end_quote

- As long as poppers config is at the end of display-buffer-alist (ACL?) then it
  shouldn't affect buffer mgmt.
- Doom's popup config should be mutually exclusive with popper's config --
  i.e. each buffer potentially treated as a popup =default-buffer-alist=, should
  only ever be handled by one system or the other.
- Deactivating popper-mode will cl-remove =popper-display-control-h= from
  display-buffer-alist. Popper won't run its dispatch, but its other
  functionality will still be in tact.
- Popper uses buffer-local variables to determine whether buffers are popups it
  should manage. Using the keybinds from =popper-map= will cause it to adopt the
  popups dispatched by doom's =+popup-display-buffer-stacked-side-window-fn=. If
  =display-buffer-alist= ends with =popper-display-control-h=, Doom's dispatch
  should pick it up.

So (fingers crossed...) this config should work alright for now.  Besides the
obvious overlapping regexp, there are two areas where unexpected state could
arise:

- Entries in =popper-reference-buffers= are specified by regexp or major mode.
- Users can raise arbitrary buffers to be treated as popups.

**** Problems

+ Running =+set-popup-rules= updates =display-buffer-alist= but doesn't actually
  change window placement. It initializes alright, but can't be changed
  mid-session. =with-popup-rules= indicates that the state doesn't change.
+ The =*Flycheck errors*= and =*Help*= buffers are configured to occupy the same
  side. Opening the second popup buffer causes an invalid window configuration
  that can't be closed.
  + see [[https://github.com/emacs-mirror/emacs/blob/5ff018524c740c77215ddb5d5983dbfcadb05599/lisp/window.el#L1327-L1348][window.el#L1327-L1348]].
    - The error is "Window %s has same side as window %s but no common parent"
    - Workaround 2: just use =winner-undo= and then kill one of the buffers
    - Workaround 2: run =window-toggle-side-windows= with =C-x w s= or =<f2> w s=
      to unpop the window.
      - However, killing one of the buffers still only allows interacting with
        the window configuration via toggling the side windows. The error
        persists.
  + The problem doesn't originate with popper.el since =popper-popup-status=
    is nil.
    - My Doom =+popup.el= configuration is held together with duct tape and
      popsicle sticks.
  + What should happen: flycheck will generally stay open, then =*xref*=
    buffers should become co-resident with it's window =:side= while flycheck
    stays docked to leftmost side.
    - what happens: nothing you do will close the windows.

**** Notes on popups

If you've never actually worked beside someone whose popups just work and you
can't ask them about it, it's potentially a large source of friction. It makes
sense for the kind of data or UI/UX interactions, but it's not your average
window system. The semantics of window and frame are simple to get past.

I just need the popups to work.  If my emacs session is fragile or if I can't
depend on something being somewhere at a particular point, that's going to slow
me down.  I need for the interface to feel familiar. With REPL-driven
development, i need the popups/buffers under control.

+ CIDER has lots of modes/buffers.
+ LSP throws in another dozen or so buffer and window types.
+ It's really nice when xref popups don't clutter your space.

** System Config

*** Per-System Settings


*** External Tools

**** Integrate Pomm with Notifications

This is tangled in my dotfiles configured

#+begin_src shell
if ps -e | grep emacs >> /dev/null; then
    emacsclient --eval "(if (boundp 'pomm-current-mode-line-string) pomm-current-mode-line-string \"\") " | xargs echo -e
fi
#+end_src

#+begin_src conf
[module/pomm]
type = custom/script
exec = /home/pavel/bin/polybar/pomm.sh
interval = 1
#+end_src

** Initial Run

*** Install all-the-icons

This package needs to be loaded by straight in order for the font to be
installed properly. When it's not, dired won't function.

Run =M-x all-the-icons-install-fonts=

** TODO Emacs Server

*** Shepherd

*** SystemD

*** Guix Home

** TODO Describe CPU Pinning

TL;DR: Emacs is single threaded: cache hits nice; any cache misses :( long gc

+ emacs server should be pinned to a CPU
  - clients should perhaps be pinned nearby (IPC?)
  - Other tasks should avoid that CPU
+ NUMA should be configured in bios and on system

It probably won't help a ton, but it probably would make GC less noticeable,
especially if you can guarantee that other processes don't compete for the pinned CPU core

+ with [[https://www.amd.com/en/products/cpu/amd-ryzen-9-5950x][AMD 5950x]] (32 core, 8MB L2 and 64MB L3, it's probably somewhat
  significant (esp. during GC, so thresholds could be higher)
+ It's actually pretty nice that you can guarantee your IDE doesn't consume all
  your resources.

See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html][Garbage Collection]] for info
  - #'garbage-collect :: runs GC and returns information about memory usage
  - garbage-collection-messages :: indicates gc start/stop in messages buffer

** TODO Other performance concerns

How do bytecode/native compilation affect symbol names and memory footprint?

+ Can these features reduce the time-to-GC?
  - Yes, probably. The symbol representations/names /probably/ go away in
    bytecode/nativecomp, but they are at least accessible when emacs-lisp
    bytecode is made readable.
+ Could other similar features/configs extend the life of single-threaded Emacs?

* Notes

** Org Agenda

*** Capturing

I attempt to capture as close to the context as possible, which is usually the
project. I've imported some of the Doom Emacs capture templates, but I've borrowed

**** TODO ensure the above notes on org-capture have been properly implemented

*** Refiling



**** TODO more robust control over refile targets (prefix args/etc)

*** Agenda Files
This will be initially set to none. This clears everything out. I've learned that =todo.org=

**** TODO default to agenda-files being set to the last 3 org-roam-dailies

only after I load the main desktop file

*** Priorities
I have 5 priorities configured.


*** TODO finish org agenda configuration overview




** Learning Org Agenda

For an overview from an experienced org-agenda user, see [[http://doc.norang.ca/org-mode.html][Organize Your Life In
Plain Text]]. It's pretty much the definitive guide on the subject. There are
also these videos from [[https://www.youtube.com/@koenighaunstetten][Rainer König]], which are by far the best videos for
explaining the "why" behind using org-agenda's features in addition to the
how. And it's the why that's very difficult to figure out on your own without
being able to simply immitate someone else's patterns.

There are features of org-agenda which if you don't use, then you're not really
using org-agenda -- in which case you're likely generating large volumes of text
to manage. Ask any writer or editor: writing is easy, editing takes forever.

That said, org-mode itself is already too large to learn quickly, especially if
you're attempting to use org-babel or other features like that. So you have to
focus on categories of features and think a ton about your own process. Org
Agenda and Org Roam and are, for now, very personal information management
systems. They are much more personal than other similar PIMS.

There's some magic to using for GTD, which isn't necessarily obvious.

*** Typical GTD traps include:

***** Tagging, scoring, filtering and categorizing

***** The cyclomatic complexity of tasks

in plain english: the size/scope of your agile "stories" along with the number
of subitems in a TODO list. The decisions a project manager makes can have
_multiplicative effects_ on how their team interacts with the system.

This is your own system, but how you decide to structure tasks in the future
will determine how valuable some features will be or how "stickable" your habits
will be. The =org-clock= features are a good example of something that will be
extremely valuable if you can structure your tasks properly. The smaller a
parent task, the more limited its time-tracking history.

*** Org-agenda challenges include:

***** Learning org-capture templates and engraining them into your workflow.

***** Learning about target files for org-capture and org-refile.

If you don't configure this properly, emacs may sputter out when dealing with
too many headlines. It will be tough for you to quickly navigate the chaos.

***** The schema of headlines

This is critical for org-agenda and org-roam.

+ You should approach the design of the schema like a search optimizaton
  specialist thinks about a site's map & content or like a webapp developer
  thinks about desigining a site's URL's to be future proof, discoverable and
  meaningful.
+ You should be designing a relatively future-proof system (at least one that is
  find-and-replaceable) where you think of both files _and_ headlines as being
  URL's.

***** The cyclomatic complexity of your org-roam and org-agenda source files.

You have files, you have headlines. Your files can have properties, but so can
 headlines. What's the difference between an org file and a headline? It's
 /almost/ arbitrary. You should not think as though there are clear file-like
 boundaries between things in your org files: all the files can be thought of as
 headlines and all headlines can be thought of as files.

Notice how the IEEE refs for web domains, web URLs and the DOM tree basically
create a similar *space* -- and you should think of these as not existing in
separate spaces, but in separate dimensions of a shared space. In practice,
however, it's impractical and, really, just overstimulating to do so. There are
many exceptions. But it's useful to understand:

<p style="font-size: 4">*There is no spoon!*</p>

Now your problem is a quite a bit more like deciding what URL's should be on a
website and what your tags should be if some small combination of them were to
make your content more discoverable (where it markdown) and _more functional_ if
it is org. Since org is a PIMS (and since it's your PIMS), you at least don't
have the "change management" problem. This makes it a good means of
experimenting with different systems.

However, the more content you make, the more you'd have to edit -- this should
be considered whether your are /making changes to your system/ or whether you
are /not making changes/.

***** TODO finish enumerating the gotchas

*** On Ontology

Your decisions in maintaining consistency in content synergize with the emacs
tools you use to query or interact with the data. This kind of thinking is (or
should be) called "ontological thinking" ... but that term is a bit ambiguous,

#+begin_quote
This ambiguity may be why people in the West are so fucked up in the head. The
smarter people among them who didn't make it far enough in philosophy may not
properly dillienate the "study of being" from the term's usage in categorizing
the metaphysical into [hopefully] mutually exclusive sets of nameable categories
-- e.g. the four elements from alchemy. And this is the source of almost every
problem in conceptualization or epistemology: trees eventually must become
graphs or networks to adequately describe things. When a system of
categorization can maintain its partitioned categories, then trees can always
neatly branch into completely separate things.

A different schism regarding conceptualization (of a different nature) occurs in
Math where one begins to need Category Cheory instead of relying on Set Theory
as a comprehensive foundation.
#+end_quote

So think back to when people actually browsed the internet, instead of
Facebook. People had personal blogs and they typically need two features to help
make their content discoverable: categories and features. The categories and
subcategories are the tree-like system of mutually exclusive groups mentioned
above. The tags feature are a many-to-many system of classifying content to make
it more discoverable. But, for the old-school blogger -- what should be a
category and what should be a tag? It's unclear. Maybe tags should also be
categories? Or maybe you should only use tags. Fortunately, every website
implicitly uses a system almost identical to that of sub/categories: the
URL/URI. Every branch point in the categories corresponds to a foreslash in the
URL.

Problem solved (or sidestepped) -- categories are an unnecessary
abstraction. The best part? You don't have to rack your brain on some O(N^N)
ontological problem -- that's just a generous estimation on the complexity.

* Why

*** Why Not Doom Emacs?

Doom is a great way to explore features. The codebase is a fantastic showcase of
=emacs-lisp= metaprogramming and Emacs config ideas. I don't use =evil-mode=,
which isn't much of a problem in Doom, but it's still great. Basically it came
down to whether Guix is more important to me than Doom Emacs.

In Doom Emacs, mixxing Guix and Straight dependencies is a recipe for serious
problems -- mostly where native comp encounters duplicate dependencies. See this
[[id:][r/guix post]] for a description of issues with guile..

But there are benefits to pulling deps from guix:

+ For one, on foreign distro's, your =GUILE_LOAD_PATH= will be simple to
  set & control. This will be managed by the guix profile.
+ On foreign distro's, without =emacs-guix= and other guix dependencies, then
  getting Guile configured properly while having access to the correct guix
  binary. You may encounter stability issues down the road. If you run =guix
  pull= using the incorrect binary -- i.e. you load your emacs profile
  everywhere so you can start it with systemd -- then you'll eventually pull
  updates to the wrong guix.
+ But if you mix both straight & guix packages in emacs, you'll invariably have
  overlapping dependency trees. If you use native comp, then you'll need to
  recompile everything if you update your Emacs binary or build deps. But, for
  me, =doom clean= wasn't working to this end. The reddit post contains more
  information.
+ Not having =emacs-guix= is a major impediment to a noob. I'm not a fan of
  GUI's generally, but they are a great way to survey the functionality to seed
  your initial sparse knowledge graph. It can help you ask questions and
  priortize issues.
+ Not having =geiser= configured to interoperate at all with =emacs-guix= or
  Guile Scheme kept me a noob for way too long.

Don't take my word for it. I'm not sure on the correct answer for Guix System
and Guix on foreign distro's. I'm still figuring this out. I will update this
description with new information and correct opinions.

The main benefits to mixxing =guix + setup.el + straight=

+ Most of your packages are getting some vetting. The dependencies are ideally
  deterministic and you can visualize them with =guix graph=.

Critically, it seems that either =straight= or =setup.el + straight= can
determine whether dependencies exist locally ... AFAIK.

+ So if Guix is providing an Emacs package, then =setup= won't tell straight to
  load it -- I have =setup.el= configured to only load from straight if
  =:straight t= is set.
+ Regardless, wouldn't it be useful if =straight= decided it didn't need to pull
  dependencies or compile? And it should be trivial to detect requireable
  modules/namespaces. So it probably does because that would be the correct
  answer to handle as many configuration scenarios as =straight.el= may
  encounter.

*** Why Guix?

The dependencies are spec'd out and reproducible packages can be supplied. You
can generate a =guix graph= of the dependency graph! If it's not enough that
Guix packages offer inheritance, tools like =guix import= and =guix update= are
available.

The flexibility and low maintainence overhead for personal packages makes
maintaining local channels dead simple. I tried RPM and didn't quite make it to
the mock tools. It was fine, but it wasn't ideal. I didn't know what ideal was
until I saw Guix. No other distributions or package managers offer =guix home=
-- they will never have anything like it because they lack the efficiency. There
is no purpose to a poor imitation of =guix home=, since it's still as
complicated as the domain but bundling the packages and services in RPM/Deb and
SystemD require about 10x the effort as similar tasks in Guix. Sadly, it takes a
long time to develop the chops to get to =guix home=.

You may need to grok about 2,500 pages of content to get there if you don't know
Scheme ... but that's knowledge you can find in one place, thanks to the GNU
documentation. The documentation is good, but there's a bit of a bootstrapping
problem if you don't have a mentor. If you don't care about scheme, then you'll
need to study about 250-500 pages, but it's easy reading.

The scheme is hard. It's too hard for most people. That's fine.  The difficulty
barriers led ArchLinux to be the success that it became. Guix is actually
easier, you just don't realize it.

And why guix system? Because I've never learned about Linux this fast. When I
wanted a RamFS only image of PXE booting, in one night, I went from:

+ A poor understanding of Grub and bootloaders
+ To grokking the basics of syslinux and pxelinux
+ To understanding u-boot by reading Guix bootloader configs.
+ To seeing configs for multiboot after reading
+ To /How do I adjust the post-boot mounting process init/mount disks to load
  all filesystems into RamFS by mapping/remapping over initramfs/squashfs?/
+ To /Can Guix load via PXE/TFTP to pull a SquashFS image from HTTPS instead of
  NFS?/ So that I can tell if gd macbook pro 2011 has RAM problems or HD
  problems? Or so I can do something with Dells that don't have disks?

And no, I can't answer these questions fully. Guix has some SquashFS
functionality, but the bootloader code needs to be modified. Still, you can't
really get around the TFTP limitation of ~100MB. There was a ton of googling
there, more gentoo forums/wiki than archwiki... But when I need to confirm the
logic of how builds/packages/systems are put together in various scenarios,
nothing helps me understand the design of this better than Guix.

So, yeh, I'd like to have a consistent experience with =emacs-guix= and
=geiser=. And I'd like =guix-devel-mode= to work.

*** Why Not Guix Home?

I've been pushing forward where I could, trying to minimize moving parts.  I
hope I haven't pre-emptively obselesced some future =guix-home= configuration
for Emacs. I think I've already obviated any simple means of building Emacs as a
set of Guix Home packages/services...

Guix Home elsewhere? Definitely, but I need a realistic migration path. For
Emacs, I am also hesitant on trans-lisp configuration DSL's outside of simple
home services -- but I need more experience with emacs-lisp before that could be
a reasonable problem to deal with. Separating concerns in emacs configs while
being able to quickly edit the config is too much for now. The benefits and
drawbacks to the process and potentiallys are probably similar to Literate
dotfiles -- they can provide a standard experience or make projects like
ESS/Scimacs/Doom more consistent or replicable.

Here I was also skeptical of how Guix itself would handle edge cases for system
config -- the immutability, the need to write packages for small things, the
service dependencies, the lack of SystemD, lack of nonfree software by default, etc.

However, these turn out to be great limitations:

+ immutability: I don't have to care really. I just reinstall. Eventually, I may
  use =guix time-machine= or be concerned with the specifics of reproducibility.
+ packages for small things: I should've been doing this for a decade or longer.
+ services for small things: ... ditto.
+ on SystemD: now I appreciate/understand SystemD a bit more and the
  kind of tools/commands that services or SystemD components utilize.
+ on lack of nonfree software in the ISO: this is complicated. If my Macbook Pro
  2011 didn't run the ISO, I may have assumed Guix was broken. But now I
  understand, what non-free software runs on my hardware and where it is. I'm a
  pragmatist, so while I prefer FOSS, but usually end up running a lot of
  non-free software. But I am a lot more capable of knowing and deciding now.

  So, my perspective/depth on this would be limited or misleading.

Without boundaries, the free energy in a particle simulation disperses quickly
-- i.e. some limitations can be essential to shape your creativity.
